import sys
import matplotlib.pyplot as plt


def save_pollock(mat,
                 color_scheme="CMRmap_r",
                 file_name="pollock",
                 vmin=0,
                 vmax=20,
                 folder=None,
                 frame=True,
                 visible_axes=True,
                 colorbar=True,
                 file_type="png"):

    fig, p = plt.subplots(figsize=(15,15))
    if isinstance(mat, list):
        abs_mat = [[abs(mat[i][j]) for j in range(0, len(mat[0]))]
                   for i in range(0, len(mat))]
    else:
        abs_mat = [[abs(mat[i][j]) for j in range(0, mat.ncols())]
                   for i in range(0, mat.nrows())]
    axes = p.imshow(
        abs_mat,
        interpolation="none",
        cmap=plt.cm.get_cmap(color_scheme, 100),
        vmin=vmin,
        vmax=vmax,
    )
    if colorbar:
        fig.colorbar(axes, orientation='vertical', fraction=0.046, pad=0.04)
    p.set_aspect('equal')
    p.get_xaxis().set_visible(visible_axes)
    p.get_yaxis().set_visible(visible_axes)
    p.patch.set_alpha(0)
    p.set_frame_on(frame)
    if folder == None:
        name_base = "{}."+file_type
    else:
        name_base = folder + "/{}." + file_type
    fig.savefig(name_base.format(file_name))

#original AES s-box
#sbox = [  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
#  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
#  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
#  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
#  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
#  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
#  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
#  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
#  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
#  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
#  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
#  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
#  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
#  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
#  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
#  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

#sbox from challenge
sbox = [0xcf, 0x7a, 0x4c, 0xf9, 0x90, 0x25, 0x13, 0xa6, 0x00, 0xb5, 0x83, 0x36, 0x5f, 0xea, 0xdc, 0x69,
  0x2b, 0x9e, 0xa8, 0x1d, 0x74, 0xc1, 0xf7, 0x42, 0xe4, 0x51, 0x67, 0xd2, 0xbb, 0x0e, 0x38, 0x8d,
  0x3a, 0x8f, 0xb9, 0x0c, 0x65, 0xd0, 0xe6, 0x53, 0xf5, 0x40, 0x76, 0xc3, 0xaa, 0x1f, 0x29, 0x9c,
  0xde, 0x6b, 0x5d, 0xe8, 0x81, 0x34, 0x02, 0xb7, 0x11, 0xa4, 0x92, 0x27, 0x4e, 0xfb, 0xcd, 0x78,
  0x9f, 0x2a, 0x1c, 0xa9, 0xc0, 0x75, 0x43, 0xf6, 0x50, 0xe5, 0xd3, 0x66, 0x0f, 0xba, 0x8c, 0x39,
  0x7b, 0xce, 0xf8, 0x4d, 0x24, 0x91, 0xa7, 0x12, 0xb4, 0x01, 0x37, 0x82, 0xeb, 0x5e, 0x68, 0xdd,
  0x6a, 0xdf, 0xe9, 0x5c, 0x35, 0x80, 0xb6, 0x03, 0xa5, 0x10, 0x26, 0x93, 0xfa, 0x4f, 0x79, 0xcc,
  0x8e, 0x3b, 0x0d, 0xb8, 0xd1, 0x64, 0x52, 0xe7, 0x41, 0xf4, 0xc2, 0x77, 0x1e, 0xab, 0x9d, 0x28,
  0x2e, 0x9b, 0xad, 0x18, 0x71, 0xc4, 0xf2, 0x47, 0xe1, 0x54, 0x62, 0xd7, 0xbe, 0x0b, 0x3d, 0x88,
  0xca, 0x7f, 0x49, 0xfc, 0x95, 0x20, 0x16, 0xa3, 0x05, 0xb0, 0x86, 0x33, 0x5a, 0xef, 0xd9, 0x6c,
  0xdb, 0x6e, 0x58, 0xed, 0x84, 0x31, 0x07, 0xb2, 0x14, 0xa1, 0x97, 0x22, 0x4b, 0xfe, 0xc8, 0x7d,
  0x3f, 0x8a, 0xbc, 0x09, 0x60, 0xd5, 0xe3, 0x56, 0xf0, 0x45, 0x73, 0xc6, 0xaf, 0x1a, 0x2c, 0x99,
  0x7e, 0xcb, 0xfd, 0x48, 0x21, 0x94, 0xa2, 0x17, 0xb1, 0x04, 0x32, 0x87, 0xee, 0x5b, 0x6d, 0xd8,
  0x9a, 0x2f, 0x19, 0xac, 0xc5, 0x70, 0x46, 0xf3, 0x55, 0xe0, 0xd6, 0x63, 0x0a, 0xbf, 0x89, 0x3c,
  0x8b, 0x3e, 0x08, 0xbd, 0xd4, 0x61, 0x57, 0xe2, 0x44, 0xf1, 0xc7, 0x72, 0x1b, 0xae, 0x98, 0x2d,
  0x6f, 0xda, 0xec, 0x59, 0x30, 0x85, 0xb3, 0x06, 0xa0, 0x15, 0x23, 0x96, 0xff, 0x4a, 0x7c, 0xc9]

SIZE_SBOX = len(sbox)

# compute the linear approximation for a given "input = output" equation
def linearApprox(input_int, output_int):
    total = 0
    # range over the input
    for ii in range(SIZE_SBOX):
        # get input and output of our equations
        input_masked = ii & input_int
        output_masked = sbox[ii] & output_int
        # same result?
        if (bin(input_masked).count("1") - bin(output_masked).count("1")) % 2 == 0:
            total += 1 
    # get the number of results compared to 8/16
    result = total - (SIZE_SBOX//2)
    if result > 0:
        result = "+" + str(result)
    else:
        result = str(result)

    return result

def calcLAT_table( SBox ):
    # rows
    outMatrix = []

    for row in range(SIZE_SBOX):
        mLine = []
        # cols
        for col in range(SIZE_SBOX):
            val = linearApprox(row, col)
            mLine.append( int(val))

        outMatrix.append(mLine)


    return outMatrix

def print_lat( latTab , filename = None):

    if filename == None:
        f = sys.stdout
    else:
        f = open(filename, "w")

    f.write( "     | ")
    for i in range(len(latTab[0])):
        f.write(hex(i)[2:].rjust(4) + " ")

    f.write("\n")
    f.write(" " + "-" * (len(latTab[0]) * 5 + 5))
    f.write("\n")

    i = 0
    for row in latTab:
        f.write(hex(i)[2:].rjust(4) +  " | ")
        # cols
        for val in row:
            f.write( str(val).rjust(4) + " ")
        f.write("\n")
        i += 1

    f.close()

def main():
    outMatrix = calcLAT_table(sbox)

    print_lat(outMatrix , "lat.txt")

    save_pollock(mat = outMatrix, file_name = "test2")

if __name__ == "__main__":
    main()
